/*
 * PROJECTView.java
 */

package project;

import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 * The application's main frame.
 */
public class PROJECTView extends FrameView {

    public PROJECTView(SingleFrameApplication app) {
        super(app);

        initComponents();
        //below code remove the required components from frame
        filefield.setVisible(false);
        filelabel.setVisible(false);
        passfield.setVisible(false);
        passlabel.setVisible(false);
        browse.setVisible(false);
        messagelabel.setVisible(false);
        messagearea.setVisible(false);
        finished.setVisible(false);
        message.setVisible(false);
        restart.setVisible(false);
        //End of first code

       //code for first window
        insert.setSelected(true);
        retrieve.setSelected(false);
        caution.setVisible(false);
        




        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = PROJECTApp.getApplication().getMainFrame();
            aboutBox = new PROJECTAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        PROJECTApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        insert = new javax.swing.JRadioButton();
        retrieve = new javax.swing.JRadioButton();
        filelabel = new javax.swing.JLabel();
        filefield = new javax.swing.JTextField();
        browse = new javax.swing.JButton();
        passlabel = new javax.swing.JLabel();
        passfield = new javax.swing.JPasswordField();
        back = new javax.swing.JButton();
        next = new javax.swing.JButton();
        close = new javax.swing.JButton();
        messagelabel = new javax.swing.JLabel();
        finished = new javax.swing.JLabel();
        message = new javax.swing.JLabel();
        restart = new javax.swing.JButton();
        caution = new javax.swing.JLabel();
        messagearea = new java.awt.TextArea();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(project.PROJECTApp.class).getContext().getResourceMap(PROJECTView.class);
        insert.setText(resourceMap.getString("insert.text")); // NOI18N
        insert.setName("insert"); // NOI18N
        insert.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                insertMouseClicked(evt);
            }
        });

        retrieve.setText(resourceMap.getString("retrieve.text")); // NOI18N
        retrieve.setName("retrieve"); // NOI18N
        retrieve.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                retrieveMouseClicked(evt);
            }
        });

        filelabel.setText(resourceMap.getString("filelabel.text")); // NOI18N
        filelabel.setName("filelabel"); // NOI18N

        filefield.setText(resourceMap.getString("filefield.text")); // NOI18N
        filefield.setName("filefield"); // NOI18N
        filefield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filefieldActionPerformed(evt);
            }
        });

        browse.setText(resourceMap.getString("browse.text")); // NOI18N
        browse.setName("browse"); // NOI18N
        browse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                browseMouseClicked(evt);
            }
        });

        passlabel.setText(resourceMap.getString("passlabel.text")); // NOI18N
        passlabel.setName("passlabel"); // NOI18N

        passfield.setText(resourceMap.getString("passfield.text")); // NOI18N
        passfield.setName("passfield"); // NOI18N

        back.setText(resourceMap.getString("back.text")); // NOI18N
        back.setEnabled(false);
        back.setName("back"); // NOI18N
        back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backMouseClicked(evt);
            }
        });

        next.setText(resourceMap.getString("next.text")); // NOI18N
        next.setActionCommand(resourceMap.getString("next.actionCommand")); // NOI18N
        next.setName("next"); // NOI18N
        next.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nextMouseClicked(evt);
            }
        });

        close.setText(resourceMap.getString("close.text")); // NOI18N
        close.setName("close"); // NOI18N
        close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeMouseClicked(evt);
            }
        });

        messagelabel.setText(resourceMap.getString("messagelabel.text")); // NOI18N
        messagelabel.setName("messagelabel"); // NOI18N

        finished.setText(resourceMap.getString("finished.text")); // NOI18N
        finished.setName("finished"); // NOI18N

        message.setText(resourceMap.getString("message.text")); // NOI18N
        message.setName("message"); // NOI18N

        restart.setText(resourceMap.getString("restart.text")); // NOI18N
        restart.setName("restart"); // NOI18N
        restart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                restartMouseClicked(evt);
            }
        });

        caution.setText(resourceMap.getString("caution.text")); // NOI18N
        caution.setName("caution"); // NOI18N

        messagearea.setName("messagearea"); // NOI18N

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(messagearea, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(messagelabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(message))
                            .addComponent(retrieve)
                            .addComponent(insert))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 351, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(passlabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(passfield))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(filelabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(filefield, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(caution)
                            .addComponent(browse)))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGap(302, 302, 302)
                                .addComponent(finished, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 177, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(restart)
                                .addGap(39, 39, 39)))
                        .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(41, 41, 41)
                .addComponent(next, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(close, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(insert)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(retrieve)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filelabel)
                    .addComponent(filefield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passlabel)
                    .addComponent(passfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(caution))
                .addGap(24, 24, 24)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(messagelabel)
                    .addComponent(message))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(messagearea, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(finished, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(109, Short.MAX_VALUE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(next)
                            .addComponent(back)
                            .addComponent(close)
                            .addComponent(restart))
                        .addGap(21, 21, 21))))
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(project.PROJECTApp.class).getContext().getActionMap(PROJECTView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 961, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 779, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void backMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMouseClicked
     if(B==2)
     {
         messagelabel.setVisible(false);
         messagearea.setVisible(false);
         passlabel.setVisible(true);
         passfield.setVisible(true);
         N=2;
         B=1;

     }
     else if(B==1)
     {
        
         passlabel.setVisible(false);
         passfield.setVisible(false);
         caution.setVisible(false);
         passfield.setColumns(6);
         filefield.setVisible(true);
         filelabel.setVisible(true);
         browse.setVisible(true);
         N=1;
         B=0;
     }


     else if(B==0)
     {
         insert.setVisible(true);
         retrieve.setVisible(true);
         filelabel.setVisible(false);
         filefield.setText(null);
         filefield.setVisible(false);
         browse.setVisible(false);
        
         back.setEnabled(false);
         N=0;
         

     }


     // TODO add your handling code here:
    }//GEN-LAST:event_backMouseClicked

    private void nextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextMouseClicked
     back.setEnabled(true);
     if(N==0)
     {
         if(insert.isSelected())
         {
             insert.setVisible(false);
             retrieve.setVisible(false);
             filelabel.setVisible(true);
             filefield.setVisible(true);
             browse.setVisible(true);
             I=1;
             N=1;
             B=0;
         }
         if(retrieve.isSelected())
         {
             insert.setVisible(false);
             retrieve.setVisible(false);        
             insert.setVisible(false);
             retrieve.setVisible(false);
             filelabel.setVisible(true);
             filefield.setVisible(true);
             browse.setVisible(true);
             I=0;
             N=1;
             B=0;
         }
     }
     else if(N==1)
     {   
         String str=".jpg";
         String ptr="png";
         Base.image=filefield.getText();
         
         if((!Base.image.endsWith(ptr)&&!Base.image.endsWith(str))||Base.image.length()<=0)
       
         {
              JOptionPane.showMessageDialog(null,"Please Enter a valied file name");


         }
         else
         {
         filelabel.setVisible(false);
         filefield.setVisible(false);
        passfield.setColumns(6);
         passfield.setVisible(true);
         passlabel.setVisible(true);
         caution.setVisible(true);
        
         browse.setVisible(false);
         N=2;
         B=1;
         //JOptionPane.showMessageDialog(null,Base.image);
         }

     }
     else if(N==2&&I==1)
     {
         Base.pass=passfield.getText();
        //JOptionPane.showMessageDialog(null,Base.pass);
         if(Base.pass.length()>5)
         {
             JOptionPane.showMessageDialog(null,"Please enter a valied password");

         }
         else
         {
       passlabel.setVisible(false);
       passfield.setVisible(false);
       caution.setVisible(false);
       messagelabel.setVisible(true);
       messagearea.setEnabled(true);
       messagearea.setVisible(true);
       B=2;
       N=3;
         }


     }
     else if(N==2&&I==0)
     {

         //String ppp="sddddddddddjsjfduiognfgsjdfgfdhghjd";

         Base.pass=passfield.getText();

          //JOptionPane.showMessageDialog(null,Base.pass);
         if(Base.pass.length()>5)
         {
             JOptionPane.showMessageDialog(null,"Please enter a valied password");

         }



         //call deepak & sreekanth with password and file name; return an encripted message


       //call Arjun and Joji with this enccripted message and password returns the message




         else
         {
           passfield.setVisible(false);
           passlabel.setVisible(false);
           caution.setVisible(false);
           insert.setVisible(false);
           retrieve.setVisible(false);
           messagelabel.setVisible(false);
           messagearea.setEnabled(true);
           messagearea.setVisible(true);
           //messagearea.setText(ppp);
           message.setVisible(true);
           back.setEnabled(false);

           //********************************************
           //String Demo="";
           Picturenet pic=new Picturenet(Base.image);
           pic.manage(Base.image,Base.pass,"",I);
          
           Convert con=new Convert(pic.output_message);

        /*   for(int j=0;j<con.len;j++)
           {
              JOptionPane.showMessageDialog(null,con.arr[j]);
          }*/
          
           Encrypt enc=new Encrypt(con.arr,con.len,Base.pass);
           enc.doDecrypt();

           messagearea.setText(enc.message);//*********change is made
           //*****************************************
           N=4;
           B=1;
         }
     }
   

     else if(N==3&&I==1)
     {

          Base.text=messagearea.getText();
          //*******************************change made**************************
          //long A[]=new long[Base.text.length()];
          //for(int i=0;i<Base.text.length();i++)
          //{
            //  A[i]=(int)Base.text.charAt(i);
          //}
          Encrypt Enc=new Encrypt(Base.pass,Base.text);
          Enc.doEncrypt();
      
          Convert con=new Convert(Enc.encrypted,Base.text.length());//*********************change made
        
          Picturenet pic=new Picturenet(Base.image);
          pic.manage(Base.image,Base.pass,con.str,I);//*******Change made here

          //call joji&arjun with password and message recieve enc
          //call deepak & sreekanth with encripted message and password recieve amessage from th




         messagelabel.setVisible(false);
         messagearea.setEnabled(false);
         messagearea.setVisible(false);
          back.setVisible(false);
         next.setVisible(false);
         finished.setVisible(true);
         restart.setVisible(true);
         N=0;
         B=0;

     }
    
     else if(N==4)
     {
         message.setVisible(false);
         messagearea.setVisible(false);
         back.setVisible(false);
         next.setVisible(false);
         finished.setVisible(true);
         restart.setVisible(true);
     }
        // TODO add your handling code here:
    }//GEN-LAST:event_nextMouseClicked

    private void closeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMouseClicked
      System.exit(0);  // TODO add your handling code here:
    }//GEN-LAST:event_closeMouseClicked

    private void browseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_browseMouseClicked




         //Major.j=1;// TODO add your handling code here:
        JFileChooser fileChooser=new JFileChooser();
	fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
	int result = fileChooser.showOpenDialog(fileChooser);
        if(result==JFileChooser.CANCEL_OPTION)
        {
            return ;
        }
        File fileName=fileChooser.getSelectedFile();
        Base.image=fileName.getAbsolutePath(); //image contains the path of the image file
        filefield.setText(Base.image);





        // TODO add your handling code here:
    }//GEN-LAST:event_browseMouseClicked

    private void insertMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_insertMouseClicked
      retrieve.setSelected(false);
      I=1;// TODO add your handling code here:
    }//GEN-LAST:event_insertMouseClicked

    private void retrieveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_retrieveMouseClicked
     insert.setSelected(false);
     I=0;// TODO add your handling code here:
    }//GEN-LAST:event_retrieveMouseClicked

    private void filefieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filefieldActionPerformed
        Base.image=filefield.getText();// TODO add your handling code here:
    }//GEN-LAST:event_filefieldActionPerformed

    private void restartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_restartMouseClicked
      N=0;
      B=0;
      Base.pass="";
      Base.image="";
      Base.text="";
      finished.setVisible(false);
      message.setVisible(false);
      restart.setVisible(false);
      insert.setVisible(true);
      retrieve.setVisible(true);
      back.setVisible(true);
      back.setEnabled(true);
      next.setVisible(true);
      next.setEnabled(true);
      N=0;
      B=0;
      // TODO add your handling code here:



      filefield.setText(null);
      messagearea.setText(null);
      //passfield.setText("                   ");
      passfield.setColumns(6);
      passfield.setText(null);
      
    }//GEN-LAST:event_restartMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JButton browse;
    private javax.swing.JLabel caution;
    private javax.swing.JButton close;
    private javax.swing.JTextField filefield;
    private javax.swing.JLabel filelabel;
    private javax.swing.JLabel finished;
    private javax.swing.JRadioButton insert;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel message;
    private java.awt.TextArea messagearea;
    private javax.swing.JLabel messagelabel;
    private javax.swing.JButton next;
    private javax.swing.JPasswordField passfield;
    private javax.swing.JLabel passlabel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton restart;
    private javax.swing.JRadioButton retrieve;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;
    private  int N=0;
    private  int B=0;
    private  int I=1;
    private int a;
    private int b;



    private JDialog aboutBox;
}
